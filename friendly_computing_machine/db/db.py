import logging
from typing import Generator, Optional

import alembic
import alembic.command
import alembic.config
from sqlalchemy import Engine
from sqlmodel import Session, create_engine

__GLOBALS = {"engine": None}


logger = logging.getLogger(__name__)


def init_engine(url: str, echo: bool = False):
    if __GLOBALS["engine"] is not None:
        raise RuntimeError("double engine init")
    __GLOBALS["engine"] = create_engine(
        url, echo=echo, pool_pre_ping=True, pool_recycle=60
    )
    logger.info("engine created")


def get_engine() -> Engine:
    if __GLOBALS["engine"] is None:
        raise RuntimeError("engine is none")
    return __GLOBALS["engine"]


def gen_get_session() -> Generator[Session, None, None]:
    # would be useful if fastapi was ever needed in this app
    with Session(get_engine()) as session:
        logger.debug("sqlalchemy session created")
        yield session
        logger.debug("sqlalchemy session completed")


def get_session(session: Optional[Session] = None) -> Session:
    if session is not None:
        return session
    return next(gen_get_session())


def run_migration(config: alembic.config.Config):
    with get_engine().begin() as connection:
        config.attributes["connection"] = connection
        alembic.command.upgrade(config, "head")


def should_run_migration(config: alembic.config.Config) -> bool:
    with get_engine().begin() as conn:
        config.attributes["connection"] = conn
        try:
            alembic.command.check(config)
        except alembic.command.util.AutogenerateDiffsDetected:
            return True

        return False


def create_migration(config: alembic.config.Config, message: Optional[str]):
    if not should_run_migration(config):
        logger.info("no migration required")
        raise RuntimeError("no migration required")
    with get_engine().begin() as conn:
        config.attributes["connection"] = conn
        alembic.command.revision(config, message=message, autogenerate=True)
