import alembic
import alembic.command
import alembic.config
from typing import Optional
from sqlalchemy import Engine
from sqlmodel import create_engine, Session


__GLOBALS = {"engine": None}


def init_engine(url: str):
    if __GLOBALS["engine"] is not None:
        raise RuntimeError("double engine init")
    __GLOBALS["engine"] = create_engine(url, echo=True)


def get_engine() -> Engine:
    if __GLOBALS["engine"] is None:
        raise RuntimeError("engine is none")
    return __GLOBALS["engine"]


def get_session():
    with Session(get_engine()) as session:
        yield session


def run_migration(config: alembic.config.Config):
    with get_engine().begin() as connection:
        config.attributes["connection"] = connection
        alembic.command.upgrade(config, "head")


def should_run_migration(config: alembic.config.Config) -> bool:
    with get_engine().begin() as conn:
        config.attributes["connection"] = conn
        try:
            alembic.command.check(config)
        except alembic.command.util.AutogenerateDiffsDetected:
            return True

        return False


def create_migration(config: alembic.config.Config, message: Optional[str]):
    if not should_run_migration(config):
        raise RuntimeError("no migration required")
    with get_engine().begin() as conn:
        config.attributes["connection"] = conn
        alembic.command.revision(config, message=message, autogenerate=True)
